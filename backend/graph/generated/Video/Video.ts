// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class VideoEntryAdded extends ethereum.Event {
  get params(): VideoEntryAdded__Params {
    return new VideoEntryAdded__Params(this);
  }
}

export class VideoEntryAdded__Params {
  _event: VideoEntryAdded;

  constructor(event: VideoEntryAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ipfsCid(): string {
    return this._event.parameters[1].value.toString();
  }

  get dateCreated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get uploader(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get projectId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Video__videosResult {
  value0: BigInt;
  value1: string;
  value2: BigInt;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: string,
    value2: BigInt,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getIpfsCid(): string {
    return this.value1;
  }

  getDateCreated(): BigInt {
    return this.value2;
  }

  getUploader(): Address {
    return this.value3;
  }

  getProjectId(): BigInt {
    return this.value4;
  }
}

export class Video extends ethereum.SmartContract {
  static bind(address: Address): Video {
    return new Video("Video", address);
  }

  videos(param0: BigInt): Video__videosResult {
    let result = super.call(
      "videos",
      "videos(uint256):(uint256,string,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Video__videosResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_videos(param0: BigInt): ethereum.CallResult<Video__videosResult> {
    let result = super.tryCall(
      "videos",
      "videos(uint256):(uint256,string,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Video__videosResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  videosCount(): BigInt {
    let result = super.call("videosCount", "videosCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_videosCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("videosCount", "videosCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createVideoEntry(
    _ipfsCid: string,
    _uploader: Address,
    _projectId: BigInt
  ): boolean {
    let result = super.call(
      "createVideoEntry",
      "createVideoEntry(string,address,uint256):(bool)",
      [
        ethereum.Value.fromString(_ipfsCid),
        ethereum.Value.fromAddress(_uploader),
        ethereum.Value.fromUnsignedBigInt(_projectId)
      ]
    );

    return result[0].toBoolean();
  }

  try_createVideoEntry(
    _ipfsCid: string,
    _uploader: Address,
    _projectId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "createVideoEntry",
      "createVideoEntry(string,address,uint256):(bool)",
      [
        ethereum.Value.fromString(_ipfsCid),
        ethereum.Value.fromAddress(_uploader),
        ethereum.Value.fromUnsignedBigInt(_projectId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class CreateVideoEntryCall extends ethereum.Call {
  get inputs(): CreateVideoEntryCall__Inputs {
    return new CreateVideoEntryCall__Inputs(this);
  }

  get outputs(): CreateVideoEntryCall__Outputs {
    return new CreateVideoEntryCall__Outputs(this);
  }
}

export class CreateVideoEntryCall__Inputs {
  _call: CreateVideoEntryCall;

  constructor(call: CreateVideoEntryCall) {
    this._call = call;
  }

  get _ipfsCid(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _uploader(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _projectId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateVideoEntryCall__Outputs {
  _call: CreateVideoEntryCall;

  constructor(call: CreateVideoEntryCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
